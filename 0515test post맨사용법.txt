CREATE TABLE student (
  row_num INT AUTO_INCREMENT,
  class_num VARCHAR(20),
  name VARCHAR(50),
  phone_num VARCHAR(20),
  email VARCHAR(50),
  address VARCHAR(100),
  add_date DATE,
  PRIMARY KEY (row_num)
);

CREATE TABLE grade (
  row_num INT,
  java_point INT,
  python_point INT,
  clang_point INT,
  add_date DATE,
  sum INT,
  avg FLOAT,
  PRIMARY KEY (row_num),
  FOREIGN KEY (row_num) REFERENCES student(row_num)
);


Express.js 설치:
npm install express

MySQL 모듈 설치:
npm install mysql

Body-parser 모듈 설치:
npm install body-parser


1. 학생을 등록한다. 
POST
http://localhost:3000/students

{
  "class_num": 1234,
  "name": "John Doe",
  "phone_num": "010-1234-5678",
  "email": "johndoe@example.com",
  "address": "123 Main Street, City",
  "add_date": "2023-05-15"
}


2. 학생의 등록된 정보를 성적(평균)으로 내림차순으로 출력한다.  
(단, 학생의 점수를 출력한다. 등록된 학생의 전체 수와 해당 학생의 석차를 같이 출력한다. 동점인 경우 학번으로 내림차순으로 함)
GET
http://localhost:3000/students/grades/


3. 학생정보를 수정한다. (일렬번호로 조회)
PUT
http://localhost:3000/students/update/일렬번호 row_num


4. 학생정보를 삭제한다. 학생정보를 삭제할 경우 점수도 같이 삭제한다. 
DELETE
http://localhost:3000/students/학번 class_num

5. 학번으로 검색한다.
(단, 학생의 점수를 출력한다.)
GET
http://localhost:3000/students/학번 class_num


6. 학생점수를 등록한다. 점수를 등록할 때 총점, 평균을 계산하여 같이 저장한다.
POST
http://localhost:3000/students/일렬번호 row_num /grades

7. 학생점수를 수정한다. 점수를 수정할 경우 총점, 평균을 계산하여 같이 저장한다.
PUT
http://localhost:3000/students/일렬번호 row_num /grades

8. 학생점수를 삭제한다. 
DELETE
http://localhost:3000/students/일렬번호 row_num  /grades











